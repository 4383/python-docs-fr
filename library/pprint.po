# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-10 11:27+0200\n"
"PO-Revision-Date: 2018-10-10 18:20+0200\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.1.1\n"

#: ../Doc/library/pprint.rst:2
msgid ":mod:`pprint` --- Data pretty printer"
msgstr ":mod:`pprint` — L’impression élégante de données"

#: ../Doc/library/pprint.rst:10
msgid "**Source code:** :source:`Lib/pprint.py`"
msgstr "**Code source :** :source:`Lib/pprint.py`"

#: ../Doc/library/pprint.rst:14
msgid ""
"The :mod:`pprint` module provides a capability to \"pretty-print\" arbitrary "
"Python data structures in a form which can be used as input to the "
"interpreter. If the formatted structures include objects which are not "
"fundamental Python types, the representation may not be loadable.  This may "
"be the case if objects such as files, sockets or classes are included, as "
"well as many other objects which are not representable as Python literals."
msgstr ""
"Le module :mod:`pprint` fournit la possibilité « d’imprimer élégamment » des "
"structures de données Python arbitraires sous une forme qui peut être "
"utilisée comme une entrée dans l’interpréteur. Si les structures formatées "
"incluent des objets qui ne sont pas de types Python fondamentaux, leurs "
"représentations peuvent ne pas être chargées. Cela peut être le cas si des "
"objets tels que des fichiers, des *sockets* ou des classes sont inclus, "
"c’est aussi valable pour beaucoup d’autres types d’objets qui ne peuvent "
"être représentés syntaxiquement en Python."

#: ../Doc/library/pprint.rst:21
msgid ""
"The formatted representation keeps objects on a single line if it can, and "
"breaks them onto multiple lines if they don't fit within the allowed width. "
"Construct :class:`PrettyPrinter` objects explicitly if you need to adjust "
"the width constraint."
msgstr ""
"L’affichage formaté affiche tant que possible les objets sur une seule "
"ligne, et les sépare sur plusieurs lignes s’ils dépassent la largeur qui "
"leur est allouée. Créez explicitement des objets :class:`PrettyPrinter` si "
"vous avez besoin de modifier les limites de largeur."

#: ../Doc/library/pprint.rst:26
msgid "Dictionaries are sorted by key before the display is computed."
msgstr ""
"Les dictionnaires sont triés par clés avant que l’affichage ne soit calculé."

#: ../Doc/library/pprint.rst:28
msgid "The :mod:`pprint` module defines one class:"
msgstr "Le module :mod:`pprint` définit une seule classe : ::"

#: ../Doc/library/pprint.rst:36
msgid ""
"Construct a :class:`PrettyPrinter` instance.  This constructor understands "
"several keyword parameters.  An output stream may be set using the *stream* "
"keyword; the only method used on the stream object is the file protocol's :"
"meth:`write` method.  If not specified, the :class:`PrettyPrinter` adopts "
"``sys.stdout``.  The amount of indentation added for each recursive level is "
"specified by *indent*; the default is one.  Other values can cause output to "
"look a little odd, but can make nesting easier to spot.  The number of "
"levels which may be printed is controlled by *depth*; if the data structure "
"being printed is too deep, the next contained level is replaced by ``...``.  "
"By default, there is no constraint on the depth of the objects being "
"formatted.  The desired output width is constrained using the *width* "
"parameter; the default is 80 characters.  If a structure cannot be formatted "
"within the constrained width, a best effort will be made.  If *compact* is "
"false (the default) each item of a long sequence will be formatted on a "
"separate line.  If *compact* is true, as many items as will fit within the "
"*width* will be formatted on each output line."
msgstr ""
"Crée une instance de :class:`PrettyPrinter`.  Ce constructeur comprend "
"plusieurs paramètres nommés.  Un flux de sortie peut être configuré en "
"utilisant le mot clé *stream*; la seule méthode utilisée sur l’objet "
"*stream* est la méthode :meth:`write` du protocole de fichiers.  Si rien "
"n’est spécifié, la classe :class:`PrettyPrinter` utilise ``sys.stdout``.  La "
"taille de l’indentation ajoutée à chaque niveau récursif est spécifiée par "
"*indent*; la valeur par défaut est un.  D’autres valeurs pourraient donner "
"des résultats surprenants, mais peuvent aider à mieux visualiser les "
"imbrications.  Le nombre de niveaux qui peuvent être affichés est contrôlé "
"par *depth*; si la structure de données est trop profonde, le niveau suivant "
"est remplacé par ``…``.  Par défaut il n’y a pas de contraintes sur la "
"profondeur des objets formatés.  Largeur désirée de la sortie est limitée à "
"l’aide du paramètre *width*; la valeur par défaut est de 80 caractères. Si "
"une structure ne peut pas être formatée dans les limites de la largeur "
"contrainte, on fera de notre mieux.  SI *compact* est initialisé à *False* "
"(la valeur par défaut), chaque élément d’une longue séquence sera formaté "
"sur une ligne séparée.  Si *compact* est initialisé à *True*, tous les "
"éléments qui peuvent tenir dans la largeur définie seront formatés sur "
"chaque ligne de sortie."

#: ../Doc/library/pprint.rst:53 ../Doc/library/pprint.rst:88
#: ../Doc/library/pprint.rst:102
msgid "Added the *compact* parameter."
msgstr "Ajout du paramètre *compact*."

#: ../Doc/library/pprint.rst:80
msgid "The :mod:`pprint` module also provides several shortcut functions:"
msgstr ""
"Le module :mod:`pprint` fournit aussi quelques fonctions de raccourcis:"

#: ../Doc/library/pprint.rst:84
msgid ""
"Return the formatted representation of *object* as a string.  *indent*, "
"*width*, *depth* and *compact* will be passed to the :class:`PrettyPrinter` "
"constructor as formatting parameters."
msgstr ""
"Retourne une représentation formatée de *object* sous forme de chaine de "
"caractères. *indent*, *width*, *depth* et *compact* sont passé au "
"constructeur de :class:`PrettyPrinter` comme paramètres de formatage."

#: ../Doc/library/pprint.rst:95
msgid ""
"Prints the formatted representation of *object* on *stream*, followed by a "
"newline.  If *stream* is ``None``, ``sys.stdout`` is used.  This may be used "
"in the interactive interpreter instead of the :func:`print` function for "
"inspecting values (you can even reassign ``print = pprint.pprint`` for use "
"within a scope).  *indent*, *width*, *depth* and *compact* will be passed to "
"the :class:`PrettyPrinter` constructor as formatting parameters."
msgstr ""

#: ../Doc/library/pprint.rst:121
msgid ""
"Determine if the formatted representation of *object* is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  This always "
"returns ``False`` for recursive objects."
msgstr ""

#: ../Doc/library/pprint.rst:131
msgid "Determine if *object* requires a recursive representation."
msgstr ""

#: ../Doc/library/pprint.rst:134
msgid "One more support function is also defined:"
msgstr ""

#: ../Doc/library/pprint.rst:138
msgid ""
"Return a string representation of *object*, protected against recursive data "
"structures.  If the representation of *object* exposes a recursive entry, "
"the recursive reference will be represented as ``<Recursion on typename with "
"id=number>``.  The representation is not otherwise formatted."
msgstr ""

#: ../Doc/library/pprint.rst:150
msgid "PrettyPrinter Objects"
msgstr ""

#: ../Doc/library/pprint.rst:152
msgid ":class:`PrettyPrinter` instances have the following methods:"
msgstr ""

#: ../Doc/library/pprint.rst:157
msgid ""
"Return the formatted representation of *object*.  This takes into account "
"the options passed to the :class:`PrettyPrinter` constructor."
msgstr ""

#: ../Doc/library/pprint.rst:163
msgid ""
"Print the formatted representation of *object* on the configured stream, "
"followed by a newline."
msgstr ""

#: ../Doc/library/pprint.rst:166
msgid ""
"The following methods provide the implementations for the corresponding "
"functions of the same names.  Using these methods on an instance is slightly "
"more efficient since new :class:`PrettyPrinter` objects don't need to be "
"created."
msgstr ""

#: ../Doc/library/pprint.rst:176
msgid ""
"Determine if the formatted representation of the object is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  Note that this "
"returns ``False`` for recursive objects.  If the *depth* parameter of the :"
"class:`PrettyPrinter` is set and the object is deeper than allowed, this "
"returns ``False``."
msgstr ""

#: ../Doc/library/pprint.rst:185
msgid "Determine if the object requires a recursive representation."
msgstr ""

#: ../Doc/library/pprint.rst:187
msgid ""
"This method is provided as a hook to allow subclasses to modify the way "
"objects are converted to strings.  The default implementation uses the "
"internals of the :func:`saferepr` implementation."
msgstr ""

#: ../Doc/library/pprint.rst:194
msgid ""
"Returns three values: the formatted version of *object* as a string, a flag "
"indicating whether the result is readable, and a flag indicating whether "
"recursion was detected.  The first argument is the object to be presented.  "
"The second is a dictionary which contains the :func:`id` of objects that are "
"part of the current presentation context (direct and indirect containers for "
"*object* that are affecting the presentation) as the keys; if an object "
"needs to be presented which is already represented in *context*, the third "
"return value should be ``True``.  Recursive calls to the :meth:`.format` "
"method should add additional entries for containers to this dictionary.  The "
"third argument, *maxlevels*, gives the requested limit to recursion; this "
"will be ``0`` if there is no requested limit.  This argument should be "
"passed unmodified to recursive calls. The fourth argument, *level*, gives "
"the current level; recursive calls should be passed a value less than that "
"of the current call."
msgstr ""

#: ../Doc/library/pprint.rst:212
msgid "Example"
msgstr "Exemple"

#: ../Doc/library/pprint.rst:214
msgid ""
"To demonstrate several uses of the :func:`pprint` function and its "
"parameters, let's fetch information about a project from `PyPI <https://pypi."
"org>`_::"
msgstr ""

#: ../Doc/library/pprint.rst:225
msgid "In its basic form, :func:`pprint` shows the whole object::"
msgstr ""

#: ../Doc/library/pprint.rst:279
msgid ""
"The result can be limited to a certain *depth* (ellipsis is used for deeper "
"contents)::"
msgstr ""

#: ../Doc/library/pprint.rst:313
msgid ""
"Additionally, maximum character *width* can be suggested. If a long object "
"cannot be split, the specified width will be exceeded::"
msgstr ""
