# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""
":mod:`glob` --- Recherche de chemins de style Unix selon certains motifs"

#: ../Doc/library/glob.rst:10
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr "**Code source :** :source:`Lib/glob.py`"

#: ../Doc/library/glob.rst:14
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified pattern "
"according to the rules used by the Unix shell, although results are returned "
"in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and "
"character ranges expressed with ``[]`` will be correctly matched.  This is "
"done by using the :func:`os.listdir` and :func:`fnmatch.fnmatch` functions "
"in concert, and not by actually invoking a subshell.  Note that unlike :func:"
"`fnmatch.fnmatch`, :mod:`glob` treats filenames beginning with a dot (``.``) "
"as special cases. (For tilde and shell variable expansion, use :func:`os."
"path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

#: ../Doc/library/glob.rst:24
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""
"Pour une correspondance littérale, il faut entourer le métacaractère par des "
"crochets. Par exemple, ``'[?]'`` reconnaît le caractère ``'?'``."

#: ../Doc/library/glob.rst:30
msgid ""
"Return a possibly-empty list of path names that match *pathname*, which must "
"be a string containing a path specification. *pathname* can be either "
"absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:"
"`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken "
"symlinks are included in the results (as in the shell)."
msgstr ""
"Renvoie une liste, potentiellement vide, de chemins correspondant au motif "
"*pathname*, qui doit être une chaîne de caractères contenant la "
"spécification du chemin. *pathname* peut être soit absolu (comme :file:`/usr/"
"src/Python-1.5/Makefile`) soit relatif (comme :file:`../../Tools/\\*/\\*."
"gif`), et contenir un caractère de remplacement de style shell. Les liens "
"symboliques cassés sont aussi inclus dans les résultats (comme pour le "
"shell)."

#: ../Doc/library/glob.rst:39
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""
"Renvoie un :term:`iterator` qui produit les mêmes valeurs que :func:`glob`, "
"sans toutes les charger en mémoire simultanément."

#: ../Doc/library/glob.rst:44
msgid ""
"For example, consider a directory containing only the following files: :file:"
"`1.gif`, :file:`2.txt`, and :file:`card.gif`.  :func:`glob` will produce the "
"following results.  Notice how any leading components of the path are "
"preserved. ::"
msgstr ""

#: ../Doc/library/glob.rst:57
msgid ""
"If the directory contains files starting with ``.`` they won't be matched by "
"default. For example, consider a directory containing :file:`card.gif` and :"
"file:`.card.gif`::"
msgstr ""
"Si le répertoire contient des fichiers commençant par ``.``, ils ne sont pas "
"reconnus par défaut. Par exemple, considérons un répertoire contenant :file:"
"`card.gif` et :file:`.card.gif` : ::"

#: ../Doc/library/glob.rst:69
msgid "Module :mod:`fnmatch`"
msgstr "Module :mod:`fnmatch`"

#: ../Doc/library/glob.rst:70
msgid "Shell-style filename (not path) expansion"
msgstr ""
"Recherche de noms de fichiers de style shell (ne concerne pas les chemins)"
