# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/reference/toplevel_components.rst:6
msgid "Top-level components"
msgstr "Composants de plus haut niveau"

#: ../Doc/reference/toplevel_components.rst:10
msgid ""
"The Python interpreter can get its input from a number of sources: from a "
"script passed to it as standard input or as program argument, typed in "
"interactively, from a module source file, etc.  This chapter gives the "
"syntax used in these cases."
msgstr ""
"L'entrée de l'interpréteur Python peut provenir d'un certain nombre de "
"sources : d'un script passé en entrée standard ou en argument de programme, "
"tapée de manière interactive, à partir d'un fichier source de module, etc. "
"Ce chapitre donne la syntaxe utilisée dans ces différents cas."

#: ../Doc/reference/toplevel_components.rst:19
msgid "Complete Python programs"
msgstr "Programmes Python complets"

#: ../Doc/reference/toplevel_components.rst:28
msgid ""
"While a language specification need not prescribe how the language "
"interpreter is invoked, it is useful to have a notion of a complete Python "
"program.  A complete Python program is executed in a minimally initialized "
"environment: all built-in and standard modules are available, but none have "
"been initialized, except for :mod:`sys` (various system services), :mod:"
"`__builtin__` (built-in functions, exceptions and ``None``) and :mod:"
"`__main__`.  The latter is used to provide the local and global namespace "
"for execution of the complete program."
msgstr ""

#: ../Doc/reference/toplevel_components.rst:36
msgid ""
"The syntax for a complete Python program is that for file input, described "
"in the next section."
msgstr ""
"La syntaxe d'un programme Python complet est celle d'un fichier d'entrée, "
"dont la description est donnée dans la section suivante."

#: ../Doc/reference/toplevel_components.rst:43
msgid ""
"The interpreter may also be invoked in interactive mode; in this case, it "
"does not read and execute a complete program but reads and executes one "
"statement (possibly compound) at a time.  The initial environment is "
"identical to that of a complete program; each statement is executed in the "
"namespace of :mod:`__main__`."
msgstr ""
"L'interpréteur peut également être invoqué en mode interactif ; dans ce cas, "
"il ne lit et n'exécute pas un programme complet mais lit et exécute une "
"seule instruction (éventuellement composée) à la fois. L'environnement "
"initial est identique à celui d'un programme complet ; chaque instruction "
"est exécutée dans l'espace de noms de :mod:`__main__`."

#: ../Doc/reference/toplevel_components.rst:54
msgid ""
"Under Unix, a complete program can be passed to the interpreter in three "
"forms: with the :option:`-c` *string* command line option, as a file passed "
"as the first command line argument, or as standard input. If the file or "
"standard input is a tty device, the interpreter enters interactive mode; "
"otherwise, it executes the file as a complete program."
msgstr ""

#: ../Doc/reference/toplevel_components.rst:64
msgid "File input"
msgstr "Fichier d'entrée"

#: ../Doc/reference/toplevel_components.rst:66
msgid "All input read from non-interactive files has the same form:"
msgstr ""
"Toutes les entrées lues à partir de fichiers non interactifs sont de la même "
"forme :"

#: ../Doc/reference/toplevel_components.rst:71
msgid "This syntax is used in the following situations:"
msgstr "Cette syntaxe est utilisée dans les situations suivantes :"

#: ../Doc/reference/toplevel_components.rst:73
msgid "when parsing a complete Python program (from a file or from a string);"
msgstr ""
"lors de l'analyse d'un programme Python complet (à partir d'un fichier ou "
"d'une chaîne de caractères) ;"

#: ../Doc/reference/toplevel_components.rst:75
msgid "when parsing a module;"
msgstr "lors de l'analyse d'un module ;"

#: ../Doc/reference/toplevel_components.rst:77
msgid "when parsing a string passed to the :keyword:`exec` statement;"
msgstr ""

#: ../Doc/reference/toplevel_components.rst:83
msgid "Interactive input"
msgstr "Entrée interactive"

#: ../Doc/reference/toplevel_components.rst:85
msgid "Input in interactive mode is parsed using the following grammar:"
msgstr ""
"L'entrée en mode interactif est analysée à l'aide de la grammaire suivante :"

#: ../Doc/reference/toplevel_components.rst:90
msgid ""
"Note that a (top-level) compound statement must be followed by a blank line "
"in interactive mode; this is needed to help the parser detect the end of the "
"input."
msgstr ""
"Notez qu'une instruction composée (de niveau supérieur) doit être suivie "
"d'une ligne blanche en mode interactif ; c'est nécessaire pour aider "
"l'analyseur à détecter la fin de l'entrée."

#: ../Doc/reference/toplevel_components.rst:97
msgid "Expression input"
msgstr "Entrée d'expression"

#: ../Doc/reference/toplevel_components.rst:103
msgid ""
"There are two forms of expression input.  Both ignore leading whitespace. "
"The string argument to :func:`eval` must have the following form:"
msgstr ""

#: ../Doc/reference/toplevel_components.rst:111
msgid "The input line read by :func:`input` must have the following form:"
msgstr ""

#: ../Doc/reference/toplevel_components.rst:123
msgid ""
"Note: to read 'raw' input line without interpretation, you can use the built-"
"in function :func:`raw_input` or the :meth:`readline` method of file objects."
msgstr ""
